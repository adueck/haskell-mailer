name: Build

# env:
#   MYMAILER_DB: postgres
#   MYMAILER_DB_HOST: localhost
#   MYMAILER_DB_PASSWORD: postgres

on: [push]
jobs:
  runhaskell:
    name: Build CI
    runs-on: ubuntu-latest
    # postgres DB for testing
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      mailpit:
        image: axllent/mailpit
        ports:
          - 8025:8025
          - 1025:1025
    steps:
      - uses: actions/checkout@v4
      - uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: "9.4"
          cabal-version: "3.10.3.0"
      - name: Configure the build
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build all --dry-run
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Install dependencies
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Save cached dependencies
        uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: |
          npm install
          npx playwright install --with-deps
          cabal build all
          npx playwright test

      # CANNOT GET THIS WORKING BECAUSE FOR SOME REASON THE SENDING TO THE
      # MAILPIT SMPT DOES'T APPEAR WORK ON THE RUNNER (WORKS LOCALLY)
      #  AND I CAN'T GET THE STDOUT FROM THE APP WHILE TESTING TO SEE WHAT'S GOING ON
      #
      # PLAYWRIGHT TESTING
      # - name: Install dependencies
      #   run: npm ci
      # - name: Install Playwright Browsers
      #   run: npx playwright install --with-deps

      # - uses: JarvusInnovations/background-action@v1
      #   name: Bootstrap System Under Test (SUT)
      #   with:
      #     run: |
      #       cabal run haskell-mailer &
      #       npx playwright test ./tests/contacts.test.ts
      #     wait-on: file://playwright-report/index.html
      #     log-output: stderr,stdout
      #     # wait-for: 1m
      #     tail: true # true = stderr,stdout
      #     # This will allow you to monitor the progress live

      # - name: Run Playwright tests
      #   run: npx playwright test
      # - uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: playwright-report
      #     path: playwright-report/
      #     retention-days: 30
